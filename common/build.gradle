/*
 * Copyright (C) 2015 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'org.jetbrains.dokka'

ext {
    PUBLISH_GROUP_ID = groupId
    PUBLISH_VERSION = versionCode
    PUBLISH_ARTIFACT_ID = 'libaddressinput-common'
    PUBLISH_DESCRIPTION = 'A library that assist application developers in collecting and handling postal addresses from all over the world.'
    PUBLISH_URL = publishUrl
    PUBLISH_LICENSE_NAME = license
    PUBLISH_LICENSE_URL = licenseUrl
    PUBLISH_DEVELOPER_ID = developerId
    PUBLISH_DEVELOPER_NAME = developerName
    PUBLISH_DEVELOPER_EMAIL = developerEmail
    PUBLISH_SCM_CONNECTION = scmConnection
    PUBLISH_SCM_DEVELOPER_CONNECTION = scmDevConnection
    PUBLISH_SCM_URL = scmUrl
}

dokkaJavadoc {
    dokkaSourceSets {
        configureEach {
            jdkVersion.set(8)
        }
    }
}

apply from: "${rootProject.projectDir}/scripts/publish-module.gradle"

sourceCompatibility = '1.7'
targetCompatibility = '1.7'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

sourceSets {
    /* It's simpler if the test resources are next to the java sources. */
    test {
        resources {
            srcDir 'src/test/java'
        }
    }
}

test {
    /* Listen to events in the test execution lifecycle. */
    beforeTest { descriptor -> logger.lifecycle("Running test: " + descriptor) }

    /* Show standard out and standard error of the test JVM(s) on the console. */
    // testLogging.showStandardStreams = true

    /* Listen to standard out and standard error of the test JVM(s). */
    // onOutput { descriptor, event ->
    //   logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
    // }
}

dependencies {
    implementation 'org.json:json:20180813'
    implementation 'com.google.guava:guava-gwt:18.0'
    testImplementation 'junit:junit:4.13'
    testImplementation 'com.google.truth:truth:0.25'
    testImplementation 'org.mockito:mockito-core:2.21.0'
}

